# Source: https://github.com/per1234/.github/blob/main/workflow-templates/check-shell.md
name: Check Shell Scripts

# See: https://docs.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    paths:
      - ".github/workflows/check-shell.ya?ml"
      - "**/.editorconfig"
      - "**.bash"
      - "**.sh"
  pull_request:
    paths:
      - ".github/workflows/check-shell.ya?ml"
      - "**/.editorconfig"
      - "**.bash"
      - "**.sh"
  schedule:
    # Run every Tuesday at 8 AM UTC to catch breakage caused by tool changes.
    - cron: "0 8 * * TUE"
  workflow_dispatch:
  repository_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: ShellCheck
        uses: azohra/shell-linter@latest

  formatting:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Format shell scripts
        # https://github.com/mvdan/sh
        run: docker run --volume "${{ github.workspace }}":/mnt --workdir /mnt mvdan/shfmt:latest -w .

      - name: Check formatting
        run: git diff --color --exit-code

  executable:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for non-executable scripts
        run: |
          # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
          EXIT_STATUS=0
          while read -r nonExecutableScriptPath; do
            # The while loop always runs once, even if no file was found
            if [[ "$nonExecutableScriptPath" == "" ]]; then
              continue
            fi

            echo "::error file=${nonExecutableScriptPath}::non-executable script file: $nonExecutableScriptPath";
            EXIT_STATUS=1
          done <<<"$(
            # The odd approach to escaping `.` in the regex is required for Windows compatibility in the use case of the
            # upstream source.
            find . \
              -type d -name '.git' -prune -or \
              -type d -name '.licenses' -prune -or \
              -type d -name '__pycache__' -prune -or \
              -type d -name 'node_modules' -prune -or \
              \( \
                -regextype posix-extended \
                -regex '.*[.](bash|sh)' -and \
                -type f -and \
                -not -executable \
                -print \
              \)
          )"
          exit $EXIT_STATUS
